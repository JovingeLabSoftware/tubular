{
    "collab_server" : "",
    "contents" : "# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(scde)\nlibrary(Biobase)\nlibrary(ggthemes)\nlibrary(GGally)\nlibrary(shiny)\nlibrary(threejs)\n\neset <- readRDS(\"./data/eset_scde.rds\")\ntsne <- readRDS(\"data/tsne_pre.rds\")\nfd <- fData(eset)\nui_theme <- function (base_size = 16, base_family = \"\") \n{\n  rebase <- ggthemes_data$solarized$base[c(paste0(\"base0\", 3:0),\n                                           paste0(\"base\", 0:3))]\n  ret <- (theme_foundation(base_size = base_size, base_family = base_family) + \n            theme(text = element_text(color = \"#c8c8c8\"), \n                  title = element_text(color = rebase[\"rebase0\"]), \n                  line = element_line(color = rebase[\"rebase01\"]), \n                  rect = element_rect(fill = \"#272b30\", color = NA), \n                  axis.ticks = element_line(color = rebase[\"rebase01\"]), \n                  axis.line = element_line(color = \"#c8c8c8\", \n                                           linetype = 1), axis.title.y = element_text(angle = 90), \n                  legend.background = element_rect(fill = NULL, color = \"NA\"), \n                  legend.key = element_rect(fill = NULL, colour = NULL, \n                                            linetype = 0), panel.background = element_rect(fill = rebase[\"rebase02\"], \n                                                                                           colour = NA), panel.border = element_blank(), \n                  panel.grid = element_line(color = rebase[\"rebase03\"]), \n                  panel.grid.major = element_line(color = rebase[\"rebase03\"]), \n                  panel.grid.minor = element_line(color = rebase[\"rebase03\"], \n                                                  size = 0.25), plot.background = element_rect(fill = NULL, \n                                                                                               colour = NULL, linetype = 0)))\n  ret\n}\n\n\nshinyServer(function(input, output) {\n  getScheme <- reactive({\n    if(colorBy() %in% colnames(pData(eset))) {\n      cb <- colorBy()\n    } else if(colorBy() == \"Genes\") {\n      cb <- \"gene\"\n    } else {\n      cb <- NULL\n    } \n    \n    if(shapeBy() %in% colnames(pData(eset))) {\n      shb <- shapeBy()\n    } else if(shapeBy() == \"Genes\") {\n      shb <- \"gene\"\n    } else {\n      shb <- NULL\n    } \n    \n    if(sizeBy() %in% colnames(pData(eset))) {\n      sib <- sizeBy()\n    } else if(sizeBy() == \"Genes\") {\n      sib <- \"gene\"\n    } else {\n      sib <- NULL\n    } \n    list(cb=cb, shb=shb, sib=sib)\n  })\n  \n  filterBy <- reactive({\n    filters <- list();\n    c <- 1\n    if(nchar(input$filter1) > 1 && tolower(input$filter1) %in% tolower(fd$hsapiens_homolog_associated_gene_name)) {\n      ix <- which(tolower(fd$hsapiens_homolog_associated_gene_name) == tolower(input$filter1))\n      filters[[c]] <- list(id=rownames(exprs(eset))[ix], op=input$op1, value=input$val1)\n      c <- c+1\n    }\n    if(nchar(input$filter2) > 1 && tolower(input$filter2) %in% tolower(fd$hsapiens_homolog_associated_gene_name)) {\n      ix <- which(tolower(fd$hsapiens_homolog_associated_gene_name) == tolower(input$filter2))\n      filters[[c]] <- list(id=rownames(exprs(eset))[ix], op=input$op2, value=input$val2)\n      c <- c+1\n    }\n    filters\n  })\n\n  colorBy <- reactive({\n    if(input$color_by == \"None\") {\n      return(\"\")\n    } else {\n      return(input$color_by)\n    }\n  })\n  \n  shapeBy <- reactive({\n    if(input$shape_by == \"None\") {\n      return(\"\")\n    } else {\n      return(input$shape_by)\n    }\n  })\n\n  sizeBy <- reactive({\n    if(input$size_by == \"None\") {\n      return(\"\")\n    } else {\n      return(input$size_by)\n    }\n  })\n\n  geneList <- reactive({\n    genes <- strsplit(input$genes, \"\\n\")\n    ix <- which(tolower(genes[[1]]) %in% tolower(fData(eset)$hsapiens_homolog_associated_gene_name))\n    if(length(ix)) {\n      return(genes[[1]][ix])\n      ix2 <- which(tolower(fData(eset)$hsapiens_homolog_associated_gene_name) %in% tolower(genes[[1]]))\n    } else {\n      return(integer(0))\n    }\n  })\n\n  getEset <- reactive({\n    temp <- eset\n    if(length(filterBy())) {\n      for(f in filterBy()) {\n        if(f$op == \"<\") {\n          temp <- temp[, which(exprs(temp)[f$id,] < f$value)]\n        } else {\n          temp <- temp[, which(exprs(temp)[f$id,] > f$value)]\n        }\n      }\n    }\n    ix <- which(tolower(fData(temp)$external_gene_name) %in% tolower(geneList()))\n    if(length(ix) > 1) {\n      vals <- apply(exprs(temp)[ix,], 2, sum)\n    } else if (length(ix) == 1) {\n      vals <- exprs(temp)[ix,]  \n    } else {\n      vals <- rep(NA, ncol(temp))\n    }\n    temp$gene = vals\n    temp\n  })\n  \n  output$distPlot2 <- renderPlot({\n    temp <- getEset()\n    if(length(filterBy())) {\n      for(f in filterBy()) {\n        if(f$op == \"<\") {\n          temp <- temp[, which(exprs(temp)[f$id,] < f$value)]\n        } else {\n          temp <- temp[, which(exprs(temp)[f$id,] > f$value)]\n        }\n      }\n    }\n    sch <- getScheme()\n    plotReducedDim(temp, colour_by=sch$cb, shape_by=sch$shb, size_by=sch$sib) + ui_theme()\n  })\n  \n  output$distPlot <- renderPlot({\n    temp <- getEset()\n    plotReducedDim(temp, colour_by=\"gene\") + ui_theme()\n    #plotReducedDim(eset, colour_by=\"gene\") + ui_theme()   \n  })\n\n  output$densityPlot <- renderPlot({\n    temp <- getEset()\n    df = data.frame(values=temp$gene, groups=pData(temp)$Zone)\n    ggplot(data = df, aes(x = groups, y = values)) +\n      geom_violin(fill=NA, col=\"gray\") + \n      geom_jitter(width = 0.05, size=0.1, color=\"orange\") +\n      ggtitle(\"Gene distribution by zone\") +\n      ui_theme()\n  })\n  \n  output$xy <- renderPlot({\n    genes <- geneList()\n    validate(\n      need((length(genes) > 1 & length(genes) < 11), paste(\"\\n\\n\", length(genes), \"valid gene(s) identified.  Please enter between 2 and 10 genes.\"))\n    )\n    ix <- which(tolower(fData(eset)$hsapiens_homolog_associated_gene_name) %in% tolower(genes))\n    df <- as.data.frame(exprs(eset)[ix,])\n    df <- as.data.frame(t(df))\n    df$Zone_simple <- eset$Zone_simple\n\n    dens <- function(data, mapping, ...) {\n      ggplot(data = data, mapping=mapping) +\n        geom_density(..., alpha = 0.9) \n    }\n    ggpairs(as.data.frame(df), \n            ggplot2::aes(colour=Zone_simple), \n            columnLabels=fData(eset)$hsapiens_homolog_associated_gene_name[ix],\n            columns=1:length(ix), \n            diag = list(continuous = dens),\n            upper = list(continuous = wrap(\"cor\", size = 5)),\n            legend=c(length(ix), 1)) +\n    ui_theme()\n  }, height=800)\n\n  output$three <- renderScatterplotThree({\n    sch <- getScheme()\n    temp <- getEset()\n    p <- plotReducedDim(temp, colour_by=sch$cb, shape_by=sch$shb, size_by=sch$sib) + ui_theme()\n    p <- ggplot_build(p)$data[[2]]\n    cols <- p$fill\n    size <- p$size\n    \n    scatterplot3js(tsne$Y, bg = \"#272b30\", \n                   color=cols, size=size/4, \n                   height = 800, \n                   axes=FALSE, \n                   flip.y = FALSE,\n                   pch=\"@\",   \n                   grid = FALSE)\n  })\n})\n\n\n## this is how tsne matrix can pre-generated\n## taken directly from scater package\n#  \n#\n#  eset <- readRDS(\"data/eset_scde.rds\")\n#  rv <- matrixStats::rowVars(exprs(eset))\n#  feature_set <- order(rv, decreasing = TRUE)[seq_len(500)]\n#  exprs_to_plot <- exprs(eset)[feature_set,]\n#  keep_feature <- (matrixStats::rowVars(exprs_to_plot) > 0.001)\n#  keep_feature[is.na(keep_feature)] <- FALSE\n#  exprs_to_plot <- exprs_to_plot[keep_feature, ]\n  \n## Standardise expression if stand_exprs(object) is null\n#  exprs_to_plot <- t(scale(t(exprs_to_plot), scale = TRUE))\n  \n#  set.seed(100)\n#  tsne_pre <- Rtsne(t(exprs_to_plot), dims=3,\n#                    initial_dims = 50, \n#                    perplexity = 8)\n# saveRDS(tsne_pre, file=\"data/tsne_pre.rds\")  \n  ",
    "created" : 1485573552439.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3410108030",
    "id" : "9E726C3E",
    "lastKnownWriteTime" : 1486486693,
    "last_content_update" : 1486486693315,
    "path" : "~/projects/tubular/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}